//code to generate and feed ecg signal samples time stretched by a period suitable for the balloon
float arr[]={1, 1.000706e+00, 1.001412e+00, 1.002119e+00, 1.002825e+00, 1.003531e+00, 1.004237e+00, 1.004944e+00, 1.005650e+00, 1.006356e+00, 1.007062e+00, 1.007768e+00, 1.008475e+00, 1.030508e+00, 1.052542e+00, 1.074576e+00, 1.096610e+00, 1.118644e+00, 1.140678e+00, 1.162712e+00, 1.184746e+00, 1.206780e+00, 1.228814e+00, 1.250847e+00, 1.272881e+00, 1.294915e+00, 1.316949e+00, 1.338983e+00, 1.315375e+00, 1.291768e+00, 1.268160e+00, 1.244552e+00, 1.220944e+00, 1.197337e+00, 1.173729e+00, 1.150121e+00, 1.126513e+00, 1.102906e+00, 1.079298e+00, 1.055690e+00, 1.032082e+00, 1.008475e+00, 1.008029e+00, 1.007583e+00, 1.007136e+00, 1.006690e+00, 1.006244e+00, 1.005798e+00, 1.005352e+00, 1.004906e+00, 1.004460e+00, 1.004014e+00, 1.003568e+00, 1.003122e+00, 1.002676e+00, 1.002230e+00, 1.001784e+00, 1.001338e+00, 1.000892e+00, 1.000446e+00, 1, 9.279661e-01, 8.559322e-01, 7.838983e-01, 7.118644e-01, 8.406780e-01, 9.694915e-01, 1.098305e+00, 1.227119e+00, 1.355932e+00, 1.484746e+00, 1.613559e+00, 1.742373e+00, 1.871186e+00, 2, 1.816102e+00, 1.632203e+00, 1.448305e+00, 1.264407e+00, 1.080508e+00, 8.966102e-01, 7.127119e-01, 5.288136e-01, 3.449153e-01, 1.610169e-01, 3.288136e-01, 4.966102e-01, 6.644068e-01, 8.322034e-01, 1, 1.000471e+00, 1.000942e+00, 1.001412e+00, 1.001883e+00, 1.002354e+00, 1.002825e+00, 1.003296e+00, 1.003766e+00, 1.004237e+00, 1.004708e+00, 1.005179e+00, 1.005650e+00, 1.006121e+00, 1.006591e+00, 1.007062e+00, 1.007533e+00, 1.008004e+00, 1.008475e+00, 1.008945e+00, 1.009416e+00, 1.009887e+00, 1.010358e+00, 1.010829e+00, 1.011299e+00, 1.011770e+00, 1.012241e+00, 1.012712e+00, 1.013183e+00, 1.013653e+00, 1.014124e+00, 1.014595e+00, 1.015066e+00, 1.015537e+00, 1.016008e+00, 1.016478e+00, 1.016949e+00, 1.027684e+00, 1.038418e+00, 1.049153e+00, 1.059887e+00, 1.070621e+00, 1.081356e+00, 1.092090e+00, 1.102825e+00, 1.113559e+00, 1.124294e+00, 1.135028e+00, 1.145763e+00, 1.156497e+00, 1.167232e+00, 1.177966e+00, 1.166465e+00, 1.154964e+00, 1.143462e+00, 1.131961e+00, 1.120460e+00, 1.108959e+00, 1.097458e+00, 1.085956e+00, 1.074455e+00, 1.062954e+00, 1.051453e+00, 1.039952e+00, 1.028450e+00, 1.016949e+00, 1.014831e+00, 1.012712e+00, 1.010593e+00, 1.008475e+00, 1.006356e+00, 1.004237e+00, 1.002119e+00, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
int i,j;
int flag=0;
const int analogInPin = A0;  
int sensorValue = 0;    

void setup() {
  // initialize digital pin 13 as an output.
    digitalWrite(analogInPin, HIGH);
  pinMode(13, OUTPUT);//pin for the air pump
  pinMode(12,OUTPUT);//pin for vacuum pump
  Serial.begin(9600);
}

// the loop function runs over and over again forever
void loop() {
  for(i=0;i<200;i++)//200 samples generated using a matlab code
  {sensorValue = analogRead(analogInPin);

  // print the results to the serial monitor:
  //Serial.print("sensor = " );
  Serial.println(sensorValue);
    if(arr[i]<0.2)
    { digitalWrite(13, HIGH); 
      digitalWrite(12,LOW);
     //Serial.print("high");
      //Serial.println(arr[j]);
      j=i;
      while(1)
      {sensorValue = analogRead(analogInPin);

  // print the results to the serial monitor:
  //Serial.print("sensor = " );
  Serial.println(sensorValue);
        if(arr[j]>1.16)
        { i=j;break;
        }
      //  Serial.println(arr[j]);
        j++;delay(100);
      }
    }
   else
    {digitalWrite(13, LOW);   // 
    digitalWrite(12,HIGH);
    //Serial.print("low");
    //Serial.println(arr[i]);
    //Serial.println(arr[i]);
    delay(1);
    }
   
   
  // wait for a second
  }
  
}
